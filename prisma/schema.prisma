generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  password  String
  name      String
  role      Role     @default(USER)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([email])
  @@index([role])
  @@index([createdAt])
  @@map("users")
}

model Company {
  id          String   @id @default(cuid())
  name        String
  description String?
  logo        String?
  website     String?
  email       String?
  phone       String?
  address     String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([name])
  @@index([email])
  @@index([createdAt])
  @@index([updatedAt])
  @@map("companies")
}

model Content {
  id        String      @id @default(cuid())
  title     String
  content   String
  type      ContentType
  status    Status      @default(DRAFT)
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt

  @@index([type])
  @@index([status])
  @@index([createdAt])
  @@index([updatedAt])
  @@index([type, status])
  @@index([title])
  @@map("contents")
}

model CompanyProfile {
  id               String             @id @default(cuid())
  type             CompanyProfileType
  companyName      String
  companyRegNumber String
  address          String
  country          String
  postalCode       String
  email            String
  contact          String
  isActive         Boolean            @default(true)
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @updatedAt
  logo             String?
  logoUrl          String?

  @@index([type])
  @@index([isActive])
  @@index([createdAt])
  @@index([updatedAt])
  @@map("company_profiles")
}

model CompanyProfileStaging {
  id               String   @id @default(cuid())
  companyRegNumber String?
  address          String?
  country          String?
  postalCode       String?
  email            String?
  contact          String?
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  isMainCompany    Boolean  @default(false)
  logo             String?
  name             String
  logoUrl          String?

  @@map("company_profile_staging")
}

model CompanyProfileProduction {
  id               String   @id @default(cuid())
  name             String
  companyRegNumber String?
  email            String?
  address          String?
  country          String?
  postalCode       String?
  contact          String?
  logo             String?
  isMainCompany    Boolean  @default(false)
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  logoUrl          String?

  @@map("company_profile_production")
}

model HeaderSettings {
  id                        String      @id @default(cuid())
  name                      String      @default("Default Header Settings")
  isActive                  Boolean     @default(true)
  desktopHeight             Int         @default(64)
  desktopPaddingHorizontal  Int         @default(16)
  desktopLogoWidth          Int         @default(40)
  desktopLogoHeight         Int         @default(40)
  desktopQuickButtonSize    Int         @default(40)
  desktopMenuButtonSize     Int         @default(40)
  tabletHeight              Int         @default(64)
  tabletPaddingHorizontal   Int         @default(16)
  tabletLogoWidth           Int         @default(40)
  tabletLogoHeight          Int         @default(40)
  tabletQuickButtonSize     Int         @default(40)
  tabletMenuButtonSize      Int         @default(40)
  mobileHeight              Int         @default(64)
  mobilePaddingHorizontal   Int         @default(16)
  mobileLogoWidth           Int         @default(40)
  mobileLogoHeight          Int         @default(40)
  mobileQuickButtonSize     Int         @default(40)
  mobileMenuButtonSize      Int         @default(40)
  backgroundColor           String      @default("#ffffff")
  pageBackgroundColor       String      @default("#ffffff")
  dropShadow                DropShadow  @default(MEDIUM)
  quickButtonBgColor        String      @default("#f3f4f6")
  quickButtonIconColor      String      @default("#6b7280")
  quickButtonHoverBgColor   String      @default("#e5e7eb")
  quickButtonHoverIconColor String      @default("#374151")
  quickButtonShape          ButtonShape @default(ROUNDED)
  quickButtonShadow         DropShadow  @default(LIGHT)
  quickButtonGap            String      @default("8px")
  menuButtonBgColor         String      @default("var(--color-neutral-200)")
  menuButtonIconColor       String      @default("var(--color-neutral-700)")
  menuButtonHoverBgColor    String      @default("var(--color-neutral-300)")
  menuButtonHoverIconColor  String      @default("var(--color-neutral-800)")
  menuButtonIconId          String      @default("menu")
  menuButtonShape           ButtonShape @default(ROUNDED)
  menuButtonShadow          DropShadow  @default(LIGHT)
  createdAt                 DateTime    @default(now())
  updatedAt                 DateTime    @updatedAt

  @@index([name])
  @@index([isActive])
  @@index([createdAt])
  @@index([updatedAt])
  @@map("header_settings")
}

model HeaderSettingsStaging {
  id                        String      @id @default(cuid())
  name                      String      @default("Staging Header Settings")
  isActive                  Boolean     @default(true)
  desktopHeight             Int         @default(64)
  desktopPaddingHorizontal  Int         @default(16)
  desktopLogoWidth          Int         @default(40)
  desktopLogoHeight         Int         @default(40)
  desktopQuickButtonSize    Int         @default(40)
  desktopMenuButtonSize     Int         @default(40)
  tabletHeight              Int         @default(64)
  tabletPaddingHorizontal   Int         @default(16)
  tabletLogoWidth           Int         @default(40)
  tabletLogoHeight          Int         @default(40)
  tabletQuickButtonSize     Int         @default(40)
  tabletMenuButtonSize      Int         @default(40)
  mobileHeight              Int         @default(64)
  mobilePaddingHorizontal   Int         @default(16)
  mobileLogoWidth           Int         @default(40)
  mobileLogoHeight          Int         @default(40)
  mobileQuickButtonSize     Int         @default(40)
  mobileMenuButtonSize      Int         @default(40)
  backgroundColor           String      @default("#ffffff")
  pageBackgroundColor       String      @default("#ffffff")
  dropShadow                DropShadow  @default(MEDIUM)
  quickButtonBgColor        String      @default("#f3f4f6")
  quickButtonIconColor      String      @default("#6b7280")
  quickButtonHoverBgColor   String      @default("#e5e7eb")
  quickButtonHoverIconColor String      @default("#374151")
  quickButtonShape          ButtonShape @default(ROUNDED)
  quickButtonShadow         DropShadow  @default(LIGHT)
  quickButtonGap            String      @default("8px")
  menuButtonBgColor         String      @default("var(--color-neutral-200)")
  menuButtonIconColor       String      @default("var(--color-neutral-700)")
  menuButtonHoverBgColor    String      @default("var(--color-neutral-300)")
  menuButtonHoverIconColor  String      @default("var(--color-neutral-800)")
  menuButtonIconId          String      @default("menu")
  menuButtonShape           ButtonShape @default(ROUNDED)
  menuButtonShadow          DropShadow  @default(LIGHT)
  createdAt                 DateTime    @default(now())
  updatedAt                 DateTime    @updatedAt

  @@index([name])
  @@index([isActive])
  @@index([createdAt])
  @@index([updatedAt])
  @@map("header_settings_staging")
}

model HeaderSettingsProduction {
  id                        String      @id @default(cuid())
  name                      String      @default("Production Header Settings")
  isActive                  Boolean     @default(true)
  desktopHeight             Int         @default(64)
  desktopPaddingHorizontal  Int         @default(16)
  desktopLogoWidth          Int         @default(40)
  desktopLogoHeight         Int         @default(40)
  desktopQuickButtonSize    Int         @default(40)
  desktopMenuButtonSize     Int         @default(40)
  tabletHeight              Int         @default(64)
  tabletPaddingHorizontal   Int         @default(16)
  tabletLogoWidth           Int         @default(40)
  tabletLogoHeight          Int         @default(40)
  tabletQuickButtonSize     Int         @default(40)
  tabletMenuButtonSize      Int         @default(40)
  mobileHeight              Int         @default(64)
  mobilePaddingHorizontal   Int         @default(16)
  mobileLogoWidth           Int         @default(40)
  mobileLogoHeight          Int         @default(40)
  mobileQuickButtonSize     Int         @default(40)
  mobileMenuButtonSize      Int         @default(40)
  backgroundColor           String      @default("#ffffff")
  pageBackgroundColor       String      @default("#ffffff")
  dropShadow                DropShadow  @default(MEDIUM)
  quickButtonBgColor        String      @default("#f3f4f6")
  quickButtonIconColor      String      @default("#6b7280")
  quickButtonHoverBgColor   String      @default("#e5e7eb")
  quickButtonHoverIconColor String      @default("#374151")
  quickButtonShape          ButtonShape @default(ROUNDED)
  quickButtonShadow         DropShadow  @default(LIGHT)
  quickButtonGap            String      @default("8px")
  menuButtonBgColor         String      @default("var(--color-neutral-200)")
  menuButtonIconColor       String      @default("var(--color-neutral-700)")
  menuButtonHoverBgColor    String      @default("var(--color-neutral-300)")
  menuButtonHoverIconColor  String      @default("var(--color-neutral-800)")
  menuButtonIconId          String      @default("menu")
  menuButtonShape           ButtonShape @default(ROUNDED)
  menuButtonShadow          DropShadow  @default(LIGHT)
  createdAt                 DateTime    @default(now())
  updatedAt                 DateTime    @updatedAt

  @@index([name])
  @@index([isActive])
  @@index([createdAt])
  @@index([updatedAt])
  @@map("header_settings_production")
}

model HeroSectionStaging {
  id           String           @id @default(cuid())
  order        Int              @unique
  templateType PageTemplateType
  templateData Json
  createdAt    DateTime         @default(now())
  updatedAt    DateTime         @updatedAt

  @@map("hero_sections_staging")
}

model HeroSectionProduction {
  id           String           @id @default(cuid())
  order        Int              @unique
  templateType PageTemplateType
  templateData Json
  createdAt    DateTime         @default(now())
  updatedAt    DateTime         @updatedAt

  @@map("hero_sections_production")
}

model Brand {
  id        String    @id @default(cuid())
  name      String
  slug      String    @unique
  isActive  Boolean   @default(true)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  products  Product[]

  @@index([name])
  @@map("brands")
}

model Supplier {
  id               String            @id @default(cuid())
  name             String
  code             String            @unique
  isActive         Boolean           @default(true)
  email            String?
  phone            String?
  notes            String?
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
  variantSuppliers VariantSupplier[]

  @@index([name])
  @@index([isActive])
  @@map("suppliers")
}

model SupplierStaging {
  id        String   @id @default(cuid())
  name      String
  code      String   @unique
  isActive  Boolean  @default(true)
  email     String?
  phone     String?
  notes     String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  isDeleted Boolean  @default(false)

  @@index([name])
  @@index([isActive])
  @@map("supplier_staging")
}

model Category {
  id                String            @id @default(cuid())
  name              String
  slug              String            @unique
  isActive          Boolean           @default(true)
  sortOrder         Int               @default(0)
  parentId          String?
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt
  description       String?
  parent            Category?         @relation("CategoryToSelf", fields: [parentId], references: [id])
  children          Category[]        @relation("CategoryToSelf")
  productCategories ProductCategory[] @relation("CategoryProductCategories")

  @@index([parentId])
  @@index([isActive])
  @@map("categories")
}

model CategoryStaging {
  id          String   @id @default(cuid())
  name        String
  slug        String   @unique
  description String?
  isActive    Boolean  @default(true)
  sortOrder   Int      @default(0)
  parentId    String?
  isDeleted   Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([parentId])
  @@index([isActive])
  @@map("category_staging")
}

model Product {
  id                     String                    @id @default(cuid())
  title                  String
  slug                   String                    @unique
  description            String?
  status                 ProductStatus             @default(DRAFT)
  brandId                String?
  defaultVariantId       String?                   @unique
  createdAt              DateTime                  @default(now())
  updatedAt              DateTime                  @updatedAt
  metaTitle              String?
  metaDescription        String?
  ogImage                String?
  categories             ProductCategoryJunction[]
  images                 ProductImage[]
  product_type_junctions product_type_junctions[]
  variants               ProductVariant[]
  brand                  Brand?                    @relation(fields: [brandId], references: [id])
  defaultVariant         ProductVariant?           @relation("DefaultVariant", fields: [defaultVariantId], references: [id])

  @@index([status])
  @@index([createdAt])
  @@index([title])
  @@map("products")
}

model ProductImage {
  id        String   @id @default(cuid())
  productId String
  url       String
  alt       String?
  sortOrder Int      @default(0)
  isPrimary Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  product   Product  @relation(fields: [productId], references: [id])

  @@index([productId, sortOrder])
  @@map("product_images")
}

model ProductVariant {
  id                String                   @id @default(cuid())
  productId         String
  sku               String                   @unique
  barcode           String?
  attributes        Json
  price             Decimal                  @db.Decimal(10, 2)
  compareAtPrice    Decimal?                 @db.Decimal(10, 2)
  isActive          Boolean                  @default(true)
  kind              VariantKind              @default(SIMPLE)
  taxRate           Decimal?                 @db.Decimal(5, 4)
  priceMode         TaxPriceMode             @default(EXCLUSIVE)
  createdAt         DateTime                 @default(now())
  updatedAt         DateTime                 @updatedAt
  inventory         InventoryItem?
  bundleComponents  ProductBundleComponent[] @relation("BundleComponentsForBundle")
  partOfBundles     ProductBundleComponent[] @relation("BundleComponentsForComponent")
  product           Product                  @relation(fields: [productId], references: [id])
  productDefaultFor Product?                 @relation("DefaultVariant")
  variantSuppliers  VariantSupplier[]

  @@index([productId])
  @@index([isActive])
  @@index([taxRate])
  @@map("product_variants")
}

model ProductBundleComponent {
  bundleVariantId    String
  componentVariantId String
  quantity           Int            @default(1)
  createdAt          DateTime       @default(now())
  bundle             ProductVariant @relation("BundleComponentsForBundle", fields: [bundleVariantId], references: [id])
  component          ProductVariant @relation("BundleComponentsForComponent", fields: [componentVariantId], references: [id])

  @@id([bundleVariantId, componentVariantId])
  @@map("product_bundle_components")
}

model InventoryItem {
  id                String          @id @default(cuid())
  variantId         String          @unique
  stockOnHand       Int             @default(0)
  reserved          Int             @default(0)
  lowStockThreshold Int             @default(0)
  backorderPolicy   BackorderPolicy @default(NONE)
  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @updatedAt
  variant           ProductVariant  @relation(fields: [variantId], references: [id])

  @@map("inventory_items")
}

model VariantSupplier {
  variantId       String
  supplierId      String
  supplierSku     String?
  costPrice       Decimal        @db.Decimal(10, 2)
  leadTimeDays    Int?
  moq             Int?
  reorderPoint    Int?
  reorderQuantity Int?
  isPrimary       Boolean        @default(false)
  isActive        Boolean        @default(true)
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
  supplier        Supplier       @relation(fields: [supplierId], references: [id])
  variant         ProductVariant @relation(fields: [variantId], references: [id])

  @@id([variantId, supplierId])
  @@index([supplierId])
  @@index([isPrimary])
  @@map("variant_suppliers")
}

model ProductCategory {
  id                   String                    @id @default(cuid())
  name                 String
  slug                 String                    @unique
  description          String?
  isActive             Boolean                   @default(true)
  sortOrder            Int                       @default(0)
  createdAt            DateTime                  @default(now())
  updatedAt            DateTime                  @updatedAt
  categoryId           String?
  products             ProductCategoryJunction[]
  category             Category?                 @relation("CategoryProductCategories", fields: [categoryId], references: [id])
  product_type_staging ProductTypeStaging[]
  product_types        ProductType[]

  @@index([categoryId])
  @@index([isActive])
  @@map("product_categories_hierarchy")
}

model ProductCategoryJunction {
  productId         String
  assignedAt        DateTime        @default(now())
  productCategoryId String
  productCategory   ProductCategory @relation(fields: [productCategoryId], references: [id])
  product           Product         @relation(fields: [productId], references: [id])

  @@id([productId, productCategoryId])
  @@index([productCategoryId])
  @@map("product_categories")
}

model ProductCategoryStaging {
  id          String   @id @default(cuid())
  name        String
  slug        String   @unique
  description String?
  isActive    Boolean  @default(true)
  sortOrder   Int      @default(0)
  isDeleted   Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  categoryId  String?

  @@index([categoryId])
  @@index([isActive])
  @@map("product_category_staging")
}

model Promotion {
  id               String               @id @default(cuid())
  name             String
  code             String?              @unique
  type             PromotionType
  value            Decimal              @db.Decimal(10, 2)
  isActive         Boolean              @default(true)
  startsAt         DateTime?
  endsAt           DateTime?
  allowStacking    Boolean              @default(true)
  stackingPriority Int                  @default(0)
  maxUses          Int?
  maxUsesPerUser   Int?
  createdAt        DateTime             @default(now())
  updatedAt        DateTime             @updatedAt
  conditions       PromotionCondition[]
  usage            PromotionUsage[]

  @@index([isActive])
  @@index([startsAt])
  @@index([endsAt])
  @@map("promotions")
}

model PromotionStaging {
  id               String        @id @default(cuid())
  name             String
  code             String?       @unique
  type             PromotionType
  value            Decimal       @db.Decimal(10, 2)
  isActive         Boolean       @default(true)
  startsAt         DateTime?
  endsAt           DateTime?
  allowStacking    Boolean       @default(true)
  stackingPriority Int           @default(0)
  maxUses          Int?
  maxUsesPerUser   Int?
  createdAt        DateTime      @default(now())
  updatedAt        DateTime      @updatedAt
  isDeleted        Boolean       @default(false)

  @@index([isActive])
  @@index([startsAt])
  @@index([endsAt])
  @@map("promotion_staging")
}

model PromotionCondition {
  id          String         @id @default(cuid())
  promotionId String
  scope       PromotionScope
  productIds  String[]
  categoryIds String[]
  minSubtotal Decimal?       @db.Decimal(10, 2)
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt
  promotion   Promotion      @relation(fields: [promotionId], references: [id])

  @@index([promotionId])
  @@map("promotion_conditions")
}

model PromotionUsage {
  id          String    @id @default(cuid())
  promotionId String
  userId      String?
  usedAt      DateTime  @default(now())
  promotion   Promotion @relation(fields: [promotionId], references: [id])

  @@index([promotionId])
  @@index([promotionId, userId])
  @@map("promotion_usage")
}

model TaxQuickRule {
  id          String   @id @default(cuid())
  name        String
  description String?
  ratePercent Decimal  @db.Decimal(5, 2)
  isInclusive Boolean  @default(false)
  isGST       Boolean  @default(false)
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([name])
  @@map("tax_quick_rules")
}

model TaxSetting {
  id          String   @id @default(cuid())
  description String
  ratePercent String
  isInclusive Boolean  @default(false)
  isGST       Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([description])
  @@map("tax_settings")
}

model TaxSettingStaging {
  id          String   @id @default(cuid())
  description String
  ratePercent String
  isInclusive Boolean  @default(false)
  isGST       Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  isDeleted   Boolean  @default(false)

  @@index([description])
  @@map("tax_settings_staging")
}

model ProductTypeStaging {
  id                           String          @id @default(cuid())
  name                         String
  slug                         String
  description                  String?
  isActive                     Boolean         @default(true)
  sortOrder                    Int             @default(0)
  isDeleted                    Boolean         @default(false)
  createdAt                    DateTime        @default(now())
  updatedAt                    DateTime        @updatedAt
  productCategoryId            String
  product_categories_hierarchy ProductCategory @relation(fields: [productCategoryId], references: [id])

  @@index([productCategoryId])
  @@index([isActive])
  @@index([isDeleted])
  @@map("product_type_staging")
}

model ProductType {
  id                           String                   @id @default(cuid())
  name                         String
  slug                         String                   @unique
  description                  String?
  isActive                     Boolean                  @default(true)
  sortOrder                    Int                      @default(0)
  createdAt                    DateTime                 @default(now())
  updatedAt                    DateTime                 @updatedAt
  productCategoryId            String
  product_type_junctions       product_type_junctions[]
  product_categories_hierarchy ProductCategory          @relation(fields: [productCategoryId], references: [id])

  @@index([productCategoryId])
  @@index([isActive])
  @@index([sortOrder])
  @@map("product_types")
}

model product_type_junctions {
  productId     String
  productTypeId String
  assignedAt    DateTime    @default(now())
  products      Product     @relation(fields: [productId], references: [id])
  product_types ProductType @relation(fields: [productTypeId], references: [id])

  @@id([productId, productTypeId])
  @@index([productTypeId])
}

enum Role {
  ADMIN
  USER
  EDITOR
}

enum ContentType {
  PAGE
  BLOG
  NEWS
  ANNOUNCEMENT
}

enum Status {
  DRAFT
  PUBLISHED
  ARCHIVED
}

enum CompanyProfileType {
  MAIN
  REMOTE
}

enum DropShadow {
  NONE
  LIGHT
  MEDIUM
  STRONG
}

enum ButtonShape {
  ROUNDED
  CIRCLE
  SQUARE
}

enum PageTemplateType {
  HERO
  INFOGRAPH
  CARD_INFO
}

enum ProductStatus {
  DRAFT
  ACTIVE
  ARCHIVED
}

enum BackorderPolicy {
  NONE
  ALLOW
  PREORDER
}

enum PromotionType {
  PERCENT
  FIXED
  FREE_SHIPPING
}

enum PromotionScope {
  PRODUCT
  CATEGORY
  CART_MIN_SUBTOTAL
}

enum TaxPriceMode {
  INCLUSIVE
  EXCLUSIVE
}

enum VariantKind {
  SIMPLE
  BUNDLE
}
